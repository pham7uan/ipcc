package com.ssdc.ipcc;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.TimeZone;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/api/voicemail") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private VoiceMailRepository voiceMailRepository;

    @GetMapping(path="/update") // Map ONLY GET Requests
    public @ResponseBody
    String updateVoidMail (@RequestParam int id) {
        SpecificationsBuilder builder = new SpecificationsBuilder();
        builder.with("id", ":", id);
        Specification<VoiceMail> spec = builder.build();
        VoiceMail voiceMail = voiceMailRepository.findOne(spec);
        voiceMail.setStatus_agent_seen("1");
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        dateFormat.setTimeZone(TimeZone.getTimeZone("Asia/Saigon"));
        Date date = new Date();
        voiceMail.setAgent_seen_time(dateFormat.format(date));
        voiceMailRepository.save(voiceMail);
        return "Updated";
    }

    @GetMapping(path="/all")
    @ResponseBody
    public List<VoiceMail> search(@RequestParam(value = "search") String search) {
//        System.out.println(search);
        SpecificationsBuilder builder = new SpecificationsBuilder();
//        Pattern pattern = Pattern.compile(" (\\w+?)(:|<|>)(a-zA-Z0-9\\-)*,");
//        Matcher matcher = pattern.matcher(search + ",");
        if (search.length() >0){
            search = search+",";
            String[] params = search.split(",");
            for (int i=0; i< params.length; i++){
                System.out.println(params[i]);
                if (params[i].contains(">")){
                    String[] parts = params[i].split(">");
                    builder.with(parts[0], ">", parts[1]);
                } else if (params[i].contains("<")){
                    String[] parts = params[i].split("<");
                    builder.with(parts[0], "<", parts[1]);
                } else if (params[i].contains(":")){
                    String[] parts = params[i].split(":");
                    builder.with(parts[0], ":", parts[1]);
                }
            }

        }
        Specification<VoiceMail> spec = builder.build();
        return voiceMailRepository.findAll(spec);
    }
}
