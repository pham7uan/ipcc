package com.ssdc.ipcc.controller;

import com.ssdc.ipcc.common.Util;
import com.ssdc.ipcc.entities.Birthday;
import com.ssdc.ipcc.entities.BirthdayRepository;
import com.ssdc.ipcc.view.BirthdayExcelView;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.tomcat.util.http.fileupload.IOUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.*;
import java.util.*;
import java.util.stream.IntStream;

import static java.util.stream.Collectors.toMap;


@Controller    // This means that this class is a Controller
@RequestMapping(path="/api/birthday") // This means URL's start with /demo (after Application path)
public class BirthdayController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private BirthdayRepository birthdayRepository;
    private List<Birthday> import_list = new LinkedList<>();
    @PostMapping(path="/import") // Map ONLY GET Requests
    public @ResponseBody
    String importBirthday(@RequestParam("file") MultipartFile file) throws IOException {
        import_list.clear();
        InputStream in = file.getInputStream();
        String log = "Import result\n";
        String errorLog ="Import fail in: \n";
        String log_form_err = "Import fail. Your excel file is not correct form.\nYou can get form by click Get form import";
        Integer numSuccess = 0;
        Integer numFail = 0;
        Integer total =0;
        Integer [] notNulls = {1,2,3,4,6,7,12};
        ArrayList<Integer> notNullList = new ArrayList<Integer>(Arrays.asList(notNulls));

        String FILE_NAME = "birthday.xlsx";
        try{
            FileInputStream excelFile = new FileInputStream(new File(FILE_NAME));
            Workbook workbook = new XSSFWorkbook(in);
            Sheet datatypeSheet = workbook.getSheetAt(0);
            int numOfRows=datatypeSheet.getPhysicalNumberOfRows();
            if (numOfRows < 3){
                return log_form_err;
            }
            total = numOfRows -2;
            for(int rowNum=2;rowNum<numOfRows;rowNum++){
                Row row=datatypeSheet.getRow(rowNum);
                int numOfCellPerRow=row.getLastCellNum();
                if (numOfCellPerRow !=13){
                    return log_form_err;
                }
                Object[] data = new Object[15];
                boolean validate = true;
                for(int cellNum=0;cellNum<numOfCellPerRow;cellNum++){
                    Cell currentCell=row.getCell(cellNum);
                    if (currentCell != null){
                        if (currentCell.getCellType() == currentCell.CELL_TYPE_STRING) {
                            data[cellNum] = currentCell.getStringCellValue();
                        } else if (currentCell.getCellType() == currentCell.CELL_TYPE_NUMERIC) {
                            if (cellNum == 2 || cellNum ==4 || cellNum ==5){
                                data[cellNum] = Integer.toString((int)currentCell.getNumericCellValue());
                            } else {
                                data[cellNum] = (int)currentCell.getNumericCellValue();
                            }
                        }

                    } else {
                        if (notNullList.contains(cellNum)){
                            errorLog = errorLog + " -Line "+rowNum + ". Column "+cellNum+" is null.\n";
                            validate = false;
                            numFail++;
                            break;
                        }
                    }
                }

                if (!validate){
                    System.out.println(errorLog);
                    continue;
                }
                int maxChainId = birthdayRepository.getMaxChaniId();
                long record_id = birthdayRepository.getMaxRecordId() + 1;
                data[0] =  record_id;
                System.out.println("ID: "+data[0]);

                if (data[8] == null){
                    data[8] = data[9];
                }

                if (data[10] == null){
                    data[10] = "Banh kem";
                } else {
                    data[10] = "Hoa";
                }

                if (data[4] != null && data[5] != null){
                    data[13] =maxChainId +1;
                    data[14] =0;
                    Birthday s = new Birthday(data);
//                    for (int i =0; i<15;i++){
//                        System.out.println("object "+i+" :"+data[i]);
//                    }
                        birthdayRepository.save(s);
                    data[0] = (Long)data[0] +1;
                    data[4] = data[5];
                    data[14] = (Integer)data[14] +1;
                    Birthday s2 = new Birthday(data);
//                    for (int i =0; i<15;i++){
//                        System.out.println("object "+i+" :"+data[i]);
//                    }
                        birthdayRepository.save(s2);
                } else {
                    data[13] =maxChainId +1;
                    data[14] =0;
                    Birthday s = new Birthday(data);
//                    for (int i =0; i<15;i++){
//                        System.out.println("object "+i+" :"+data[i]);
//                    }
                        birthdayRepository.save(s);
                }
                Birthday b = birthdayRepository.findOne(record_id);
                import_list.add(b);
                numSuccess++;
            }
//            Iterator<Row> iterator = datatypeSheet.iterator();
//            int row = 0;
//            while (iterator.hasNext()) {
//                Row currentRow = iterator.next();
//                Iterator<Cell> cellIterator = currentRow.iterator();
//                if (row >1){
//                    int col = 0;
//                    Object[] data = new Object[15];
//                    while (cellIterator.hasNext()) {
//                        if (col < 13) {//number column need to import
//                            Cell currentCell = cellIterator.next();
//                            if (currentCell.getCellTypeEnum() == CellType.STRING) {
//                                data[col] = currentCell.getStringCellValue();
////                                System.out.println("string "+col+": "+currentCell.getStringCellValue());
//                            } else if (currentCell.getCellTypeEnum() == CellType.NUMERIC) {
//                                if (col == 2 || col ==4 || col ==5){
//                                    data[col] = Integer.toString((int)currentCell.getNumericCellValue());
//                                } else {
//                                    data[col] = (int)currentCell.getNumericCellValue();
//                                }
//                            }
//                        }
//                        col ++;
//                    }
//
//
//
//                }
//                row++;
//            }
        } catch (Exception e) {
            e.printStackTrace();
            return log_form_err;
        }
//        catch (IOException e) {
//            e.printStackTrace();
//        }
        log = log + "- Import success "+numSuccess+"/"+total+".\n";
        log = log + " -Import fail "+numFail+"/"+total+".\n";
        if (numFail>0){
            log = log + errorLog;
        }
        return log;
    }

    @GetMapping(path="/export") // Map ONLY GET Requests
    public @ResponseBody
    ModelAndView getResult (HttpServletRequest request, HttpServletResponse response) {
        Map<Integer,Birthday> birthdayData = new HashMap<Integer,Birthday>();
        Iterable<Birthday> birthdays = birthdayRepository.findAll();
        int stt =0;
        for (Birthday b:birthdays){
            birthdayData.put(stt,b);
            stt++;
        }

        response.setContentType( "application/ms-excel" );
        response.setHeader( "Content-disposition", "attachment; filename=BirthdayCampaign.xls" );
        return new ModelAndView(new BirthdayExcelView(),"birthdayData",birthdayData);
    }

    @GetMapping(path="/form") // Map ONLY GET Requests
    public void getDownload(HttpServletResponse response) throws IOException {

        String FILE_NAME = "birthday.xlsx";
        FileInputStream excelFile = new FileInputStream(new File(FILE_NAME));

        // Set the content type and attachment header.
        response.addHeader("Content-disposition", "attachment;filename=BirthdayCampaignForm.xlsx");
        response.setContentType("application/ms-excel");

        // Copy the stream to the response's output stream.
        IOUtils.copy(excelFile, response.getOutputStream());
        response.flushBuffer();
    }

    @GetMapping(path="/all")
    @ResponseBody
    public List<Birthday> search(@RequestParam(value = "size") int size,@RequestParam(value = "page") int page ) {
//        List<Birthday> p = new LinkedList<>();
//        int numPage=0;
//        if (import_list.size()%size > 0){
//            numPage = import_list.size()/size +1;
//        } else  {
//            numPage = import_list.size()/size;
//        }
//        if (page <0 || page>numPage){
//            return null;
//        }
//        if (import_list.size() >size){
//            if (page==1){
//                p = import_list.subList(0,size-1);
//                return p;
//            } else if(page<numPage){
//                p = import_list.subList(page*size - size,page*size);
//                return p;
//            } else if(page==numPage){
//                p=import_list.subList(page*(size-1),import_list.size()-1);
//                return p;
//            }
//        } else {
//            return import_list;
//        }
//        return import_list;
        return Util.PaginationList(import_list,size,page);

    }
}
